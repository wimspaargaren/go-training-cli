// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	repository "github.com/wimspaargaren/go-training-cli/internal/repository"
)

// TODOStore is an autogenerated mock type for the TODOStore type
type TODOStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: todo
func (_m *TODOStore) Create(todo repository.TODO) (repository.TODO, error) {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 repository.TODO
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.TODO) (repository.TODO, error)); ok {
		return rf(todo)
	}
	if rf, ok := ret.Get(0).(func(repository.TODO) repository.TODO); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Get(0).(repository.TODO)
	}

	if rf, ok := ret.Get(1).(func(repository.TODO) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TODOStore) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *TODOStore) Get(id int) (repository.TODO, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 repository.TODO
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (repository.TODO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) repository.TODO); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(repository.TODO)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *TODOStore) List() ([]repository.TODO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []repository.TODO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.TODO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.TODO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.TODO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: todo
func (_m *TODOStore) Update(todo repository.TODO) (repository.TODO, error) {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 repository.TODO
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.TODO) (repository.TODO, error)); ok {
		return rf(todo)
	}
	if rf, ok := ret.Get(0).(func(repository.TODO) repository.TODO); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Get(0).(repository.TODO)
	}

	if rf, ok := ret.Get(1).(func(repository.TODO) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTODOStore creates a new instance of TODOStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTODOStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TODOStore {
	mock := &TODOStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
